From 0f9800cd67d6df94168e7845de5a5baa8eb1ba61 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Sun, 1 Aug 2021 07:20:42 +0000
Subject: [PATCH DEBUG v4.19 1/1] DEBUG: pinctrl: intel: Ignore busy state of
 JTAG pins

Signed-of-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/pinctrl/intel/pinctrl-intel.c | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/drivers/pinctrl/intel/pinctrl-intel.c b/drivers/pinctrl/intel/pinctrl-intel.c
index 89ff2795a8b5..a7d6a5662cb4 100644
--- a/drivers/pinctrl/intel/pinctrl-intel.c
+++ b/drivers/pinctrl/intel/pinctrl-intel.c
@@ -243,11 +243,13 @@ static bool intel_pad_locked(struct intel_pinctrl *pctrl, unsigned pin)
 	 */
 	offset = community->padcfglock_offset + padgrp->reg_num * 8;
 	value = readl(community->regs + offset);
+	printk("%s(%d) pin %d value 0x%08x padcfglock_offset 0x%08x reg_num 0x%08x offset 0x%08x gpp_offset 0x%08x 0x%08lx is_true %ld\n", __func__, __LINE__, pin, value, community->padcfglock_offset, padgrp->reg_num, offset, gpp_offset, BIT(gpp_offset), value & BIT(gpp_offset));
 	if (value & BIT(gpp_offset))
 		return true;
 
 	offset = community->padcfglock_offset + 4 + padgrp->reg_num * 8;
 	value = readl(community->regs + offset);
+	printk("%s(%d) pin %d value 0x%08x padcfglock_offset 0x%08x reg_num 0x%08x offset 0x%08x gpp_offset 0x%08x 0x%08lx is_true %ld\n", __func__, __LINE__, pin, value, community->padcfglock_offset, padgrp->reg_num, offset, gpp_offset, BIT(gpp_offset), value & BIT(gpp_offset));
 	if (value & BIT(gpp_offset))
 		return true;
 
@@ -256,6 +258,7 @@ static bool intel_pad_locked(struct intel_pinctrl *pctrl, unsigned pin)
 
 static bool intel_pad_usable(struct intel_pinctrl *pctrl, unsigned pin)
 {
+printk("%s(%d)\n", __func__, __LINE__);
 	return intel_pad_owned_by_host(pctrl, pin) &&
 		!intel_pad_locked(pctrl, pin);
 }
@@ -379,12 +382,13 @@ static int intel_pinmux_set_mux(struct pinctrl_dev *pctldev, unsigned function,
 	 * before we can enable the mux for this group.
 	 */
 	for (i = 0; i < grp->npins; i++) {
+printk("%s(%d) i %d\n", __func__, __LINE__, i);
 		if (!intel_pad_usable(pctrl, grp->pins[i])) {
 			raw_spin_unlock_irqrestore(&pctrl->lock, flags);
 			return -EBUSY;
 		}
 	}
-
+printk("%s(%d) i %d\n", __func__, __LINE__, i);
 	/* Now enable the mux setting for each pin in the group */
 	for (i = 0; i < grp->npins; i++) {
 		void __iomem *padcfg0;
@@ -449,12 +453,12 @@ static int intel_gpio_request_enable(struct pinctrl_dev *pctldev,
 	unsigned long flags;
 
 	raw_spin_lock_irqsave(&pctrl->lock, flags);
-
+printk("%s(%d)\n", __func__, __LINE__);
 	if (!intel_pad_usable(pctrl, pin)) {
 		raw_spin_unlock_irqrestore(&pctrl->lock, flags);
 		return -EBUSY;
 	}
-
+printk("%s(%d)\n", __func__, __LINE__);
 	padcfg0 = intel_get_padcfg(pctrl, pin, PADCFG0);
 
 	/*
@@ -724,10 +728,10 @@ static int intel_config_set(struct pinctrl_dev *pctldev, unsigned pin,
 {
 	struct intel_pinctrl *pctrl = pinctrl_dev_get_drvdata(pctldev);
 	int i, ret;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	if (!intel_pad_usable(pctrl, pin))
 		return -ENOTSUPP;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	for (i = 0; i < nconfigs; i++) {
 		switch (pinconf_to_config_param(configs[i])) {
 		case PIN_CONFIG_BIAS_DISABLE:
@@ -1377,6 +1381,9 @@ int intel_pinctrl_probe(struct platform_device *pdev,
 		community->regs = regs;
 		community->pad_regs = regs + padbar;
 
+		printk("%s(%d) community %d readl(community->regs + 0x90) 0x%08x\n", __func__, __LINE__, i, readl(community->regs + 0x90));
+		printk("%s(%d) community %d readl(community->regs + 0x94) 0x%08x\n", __func__, __LINE__, i, readl(community->regs + 0x94));
+
 		if (!community->is_offset)
 			community->is_offset = GPI_IS;
 
@@ -1421,10 +1428,10 @@ EXPORT_SYMBOL_GPL(intel_pinctrl_probe);
 static bool intel_pinctrl_should_save(struct intel_pinctrl *pctrl, unsigned pin)
 {
 	const struct pin_desc *pd = pin_desc_get(pctrl->pctldev, pin);
-
+printk("%s(%d)\n", __func__, __LINE__);
 	if (!pd || !intel_pad_usable(pctrl, pin))
 		return false;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	/*
 	 * Only restore the pin if it is actually in use by the kernel (or
 	 * by userspace). It is possible that some pins are used by the
-- 
2.20.1

